#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≥—Ä—É–ø–ø–∞–º–∏.
–ó–∞–ø—É—Å–∫: python test_groups_api.py

–¢—Ä–µ–±—É–µ—Ç API —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ Django:
http://localhost:8000/admin/core/apitoken/

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ.
"""

import requests
import json
import os
from datetime import datetime, date

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
BASE_URL = "http://localhost:8000/api/crud/groups/"

# API —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
API_TOKEN = 'Xou_3BhElBy8cCN53Gc3M7hjmPmhht_sZwwqZoCf1Qw'
# API_TOKEN = os.getenv('API_TOKEN', 'Xou_3BhElBy8cCN53Gc3M7hjmPmhht_sZwwqZoCf1Qw')

def get_headers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"""
    return {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {API_TOKEN}"
    }

def print_separator(text):
    print(f"\n{'='*60}")
    print(f"{text}")
    print(f"{'='*60}")

def check_auth():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if API_TOKEN == 'your-api-token-here':
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API —Ç–æ–∫–µ–Ω!")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ API —Ç–æ–∫–µ–Ω –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏: http://localhost:8000/admin/core/apitoken/")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export API_TOKEN=your-actual-token")
        print("3. –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ –Ω–∞–ø—Ä—è–º—É—é")
        return False
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API —Ç–æ–∫–µ–Ω: {API_TOKEN[:10]}...")
    return True

def test_auth():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
    print_separator("–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    try:
        response = requests.get(BASE_URL, headers=get_headers())
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 401:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            try:
                error_data = response.json()
                print(f"   –û—à–∏–±–∫–∞: {error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            except:
                pass
            return False
        elif response.status_code == 403:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API")
            try:
                error_data = response.json()
                print(f"   –û—à–∏–±–∫–∞: {error_data.get('message', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')}")
            except:
                pass
            return False
        elif response.status_code == 200:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç—ã
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def handle_auth_error(response):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if response.status_code == 401:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω")
        try:
            error_data = response.json()
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        except:
            pass
        return True
    elif response.status_code == 403:
        print("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —É —Ç–æ–∫–µ–Ω–∞")
        try:
            error_data = response.json()
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_data.get('message', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')}")
        except:
            pass
        return True
    return False

def test_create_group():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã"""
    print_separator("–¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
    
    test_data = {
        "groupId": 99999,
        "groupUnique": "NEWTEST124",
        "courseName": "–¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è API",
        "supervisorName": "–¢–µ—Å—Ç–æ–≤—ã–π –¢—Ä–µ–Ω–µ—Ä –¢—Ä–µ–Ω–µ—Ä–æ–≤–∏—á",
        "supervisorIIN": "123456789012",
        "startingDate": "2024-01-01",
        "endingDate": "2024-01-31",
        "listenersList": [
            {
                "iin": "987654321098",
                "surname": "–¢–ï–°–¢–û–í–´–ô",
                "name": "–£–ß–ê–°–¢–ù–ò–ö –ü–ï–†–í–´–ô",
                "email": "participant1@test.ru"
            },
            {
                "iin": "987654321099",
                "surname": "–¢–ï–°–¢–û–í–´–ô",
                "name": "–£–ß–ê–°–¢–ù–ò–ö –í–¢–û–†–û–ô", 
                "email": "participant2@test.ru"
            }
        ],
        "daysforAttendence": [
            "2024-01-01T00:00:00",
            "2024-01-02T00:00:00",
            "2024-01-03T00:00:00"
        ]
    }
    
    try:
        response = requests.post(
            BASE_URL,
            json=test_data,
            headers=get_headers()
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if handle_auth_error(response):
            return False
            
        if response.status_code in [200, 201]:
            print("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {response.text}")
        
        return response.status_code in [200, 201]
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_get_group(group_code):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–¥—É"""
    print_separator(f"–¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_code}")
    
    try:
        response = requests.get(f"{BASE_URL}{group_code}/", headers=get_headers())
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if handle_auth_error(response):
            return False
        
        if response.status_code == 200:
            print("‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞!")
            print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {response.text}")
        
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
        return False

def test_list_groups():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
    print_separator("–¢–ï–°–¢: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø")
    
    try:
        response = requests.get(BASE_URL, headers=get_headers())
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if handle_auth_error(response):
            return False
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {data.get('count', 0)}")
            print(json.dumps(data, indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {response.text}")
        
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
        return False

def test_add_participants_via_update(group_code):
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    print_separator(f"–¢–ï–°–¢: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ PATCH {group_code}")
    
    update_data = {
        "listenersList": [
            {
                "iin": "987654321098",
                "surname": "–¢–ï–°–¢–û–í–´–ô",
                "name": "–£–ß–ê–°–¢–ù–ò–ö –ü–ï–†–í–´–ô",
                "email": "participant1@test.ru"
            },
            {
                "iin": "987654321099",
                "surname": "–¢–ï–°–¢–û–í–´–ô",
                "name": "–£–ß–ê–°–¢–ù–ò–ö –í–¢–û–†–û–ô", 
                "email": "participant2@test.ru"
            },
            {
                "iin": "111111111111",
                "surname": "–ù–û–í–´–ô",
                "name": "–£–ß–ê–°–¢–ù–ò–ö",
                "email": "new_participant@test.ru"
            }
        ]
    }
    
    try:
        response = requests.patch(
            f"{BASE_URL}{group_code}/",
            json=update_data,
            headers=get_headers()
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if handle_auth_error(response):
            return False
            
        if response.status_code == 200:
            print("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {response.text}")
        
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return False

def test_update_sessions(group_code):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π —á–µ—Ä–µ–∑ PATCH"""
    print_separator(f"–¢–ï–°–¢: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã {group_code}")
    
    update_data = {
        "daysforAttendence": [
            "2024-01-01T00:00:00",
            "2024-01-02T00:00:00",
            "2024-01-03T00:00:00",
            "2024-01-04T00:00:00"
        ]
    }
    
    try:
        response = requests.patch(
            f"{BASE_URL}{group_code}/",
            json=update_data,
            headers=get_headers()
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if handle_auth_error(response):
            return False
            
        if response.status_code == 200:
            print("‚úÖ –°–µ—Å—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {response.text}")
        
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
        return False

def test_create_import_group():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ miniresponse.json"""
    print_separator("–¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ miniresponse.json")
    
    import_data = {
        "groupId": 88888,
        "groupUnique": "NEWIMPORT1",
        "courseName": "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å",
        "supervisorName": "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¢—Ä–µ–Ω–µ—Ä",
        "supervisorIIN": "555555555555",
        "startingDate": "2024-02-01",
        "endingDate": "2024-02-28",
        "listenersList": [
            {
                "iin": "444444444444",
                "surname": "–ò–ú–ü–û–†–¢",
                "name": "–¢–ï–°–¢–û–í–´–ô",
                "email": "import@test.ru"
            }
        ],
        "daysforAttendence": [
            "2024-02-01T00:00:00",
            "2024-02-02T00:00:00"
        ]
    }
    
    try:
        response = requests.post(
            BASE_URL,
            json=import_data,
            headers=get_headers()
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if handle_auth_error(response):
            return False
            
        if response.status_code in [200, 201]:
            print("‚úÖ –ì—Ä—É–ø–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ–∑–¥–∞–Ω–∞!")
            print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.text}")
        
        return response.status_code in [200, 201]
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        return False

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ 500 –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
    print_separator("–¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 500")
    
    error_types = ['generic', 'division', 'attribute', 'key']
    
    all_passed = True
    
    for error_type in error_types:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–∞: {error_type}")
        
        try:
            response = requests.get(
                f"{BASE_URL}test-error/?type={error_type}",
                headers=get_headers()
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
            try:
                response_data = response.json()
                print(f"   ‚úÖ –û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—à–∏–±–∫–∏
                if 'error' in response_data and 'message' in response_data:
                    print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏")
                    print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {response_data.get('message', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                else:
                    print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –æ—Ç–≤–µ—Ç–∞")
                    all_passed = False
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å 500
                if response.status_code == 500:
                    print(f"   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å 500")
                else:
                    print(f"   ‚ö†Ô∏è  –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 500, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                    
            except json.JSONDecodeError:
                print(f"   ‚ùå –û—Ç–≤–µ—Ç –ù–ï –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ!")
                print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:200]}...")
                all_passed = False
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            all_passed = False
    
    return all_passed

def test_invalid_group_code():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã (404 –≤ JSON)"""
    print_separator("–¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã")
    
    try:
        response = requests.get(f"{BASE_URL}NONEXISTENT/", headers=get_headers())
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if handle_auth_error(response):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ 404 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ JSON
        try:
            response_data = response.json()
            print("‚úÖ –û—Ç–≤–µ—Ç 404 –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
            print(json.dumps(response_data, indent=2, ensure_ascii=False))
            
            if response.status_code == 404:
                print("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å 404")
                return True
            else:
                print(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 404, –ø–æ–ª—É—á–µ–Ω {response.status_code}")
                return False
                
        except json.JSONDecodeError:
            print("‚ùå –û—Ç–≤–µ—Ç 404 –ù–ï –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ!")
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:200]}...")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_update_group(group_code):
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    print_separator(f"–¢–ï–°–¢: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_code}")
    
    update_data = {
        "courseName": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞",
        "supervisorName": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¢—Ä–µ–Ω–µ—Ä"
    }
    
    try:
        response = requests.patch(
            f"{BASE_URL}{group_code}/",
            json=update_data,
            headers=get_headers()
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if handle_auth_error(response):
            return False
            
        if response.status_code == 200:
            print("‚úÖ –ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            print(json.dumps(response.json(), indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.text}")
        
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è –≥—Ä—É–ø–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ miniresponse.json")
    print(f"–ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not check_auth():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    auth_result = test_auth()
    results.append(("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", auth_result))
    
    if not auth_result:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã NEWTEST124", test_create_group()))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    results.append(("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", test_list_groups()))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    results.append(("–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã TEST123", test_get_group("TEST123")))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ PATCH
    results.append(("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", test_add_participants_via_update("TEST123")))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π —á–µ—Ä–µ–∑ PATCH
    results.append(("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π", test_update_sessions("TEST123")))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
    results.append(("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã", test_update_group("TEST123")))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ miniresponse.json
    results.append(("–°–æ–∑–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON", test_create_import_group()))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    results.append(("–ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã NEWIMPORT1", test_get_group("NEWIMPORT1")))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    results.append(("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ 500", test_error_handling()))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É 404
    results.append(("–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≥—Ä—É–ø–ø—ã", test_invalid_group_code()))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print_separator("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name:<30} {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        print("- –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –≤ —Ñ–æ—Ä–º–∞—Ç–µ miniresponse.json")
        print("- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–µ—Ä–µ–∑ listenersList")  
        print("- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ —á–µ—Ä–µ–∑ daysforAttendence")
        print("- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ PATCH/PUT")
        print("- –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ –∫–æ–¥—É")
        print("- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ (–≤–∫–ª—é—á–∞—è 500)")
        print("- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —Ç–æ–∫–µ–Ω—ã")
    else:
        print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main() 