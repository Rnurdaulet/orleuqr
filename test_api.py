#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã API –≥—Ä—É–ø–ø –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
"""

import requests
import json
import sys
from datetime import datetime


class APIClient:
    def __init__(self, base_url, token):
        self.base_url = base_url.rstrip('/')
        self.headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
    
    def test_health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API...")
        
        try:
            response = requests.get(f"{self.base_url}/api/health/", headers=self.headers)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"   –°–µ—Ä–≤–∏—Å: {data.get('authenticated_service')}")
                print(f"   –ü—Ä–∞–≤–∞: {data.get('permissions')}")
                print(f"   –í—Ä–µ–º—è: {data.get('timestamp')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def test_my_groups(self, participant_iin, page=1, per_page=5):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        print(f"\nüë• –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant_iin}...")
        
        try:
            params = {
                'participant_iin': participant_iin,
                'page': page,
                'per_page': per_page
            }
            
            response = requests.get(
                f"{self.base_url}/api/groups/my_groups/",
                headers=self.headers,
                params=params
            )
            
            data = response.json()
            
            if response.status_code == 200:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {data['total_groups']}")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
                if 'participant_info' in data:
                    participant = data['participant_info']
                    print(f"   –£—á–∞—Å—Ç–Ω–∏–∫: {participant['full_name']} ({participant['role']})")
                
                # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
                print(f"   –°—Ç—Ä–∞–Ω–∏—Ü–∞: {data['pagination']['page']} –∏–∑ {data['pagination']['total_pages']}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –≥—Ä—É–ø–ø)
                if 'message' in data:
                    print(f"   ‚ÑπÔ∏è {data['message']}")
                    if 'details' in data:
                        print(f"   üìù {data['details']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
                for group in data['groups']:
                    print(f"\nüìö –ì—Ä—É–ø–ø–∞: {group['code']} - {group['course_name']}")
                    print(f"   –ü–µ—Ä–∏–æ–¥: {group['start_date']} ‚Äî {group['end_date']}")
                    print(f"   –°–µ—Å—Å–∏–π: {group['sessions_count']}")
                    
                    print("   üìÖ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å:")
                    for session in group['sessions'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–µ—Å—Å–∏–∏
                        status_icon = "üü¢" if session['is_today'] else "üìÖ"
                        
                        if session['attendance']:
                            att = session['attendance']
                            arrived = att['arrived_at'][:16] if att['arrived_at'] else '–ù–µ –ø—Ä–∏—à–µ–ª'
                            left = att['left_at'][:16] if att['left_at'] else '–ù–µ —É—à–µ–ª'
                            trust_icon = {"trusted": "üü¢", "suspicious": "üü°", "blocked": "üî¥"}.get(att['trust_level'], "‚ùì")
                            
                            print(f"      {status_icon} {session['date']}: {att['arrived_status_display']} ({arrived} ‚Äî {left}) {trust_icon}")
                        else:
                            print(f"      {status_icon} {session['date']}: –ù–µ –ø–æ—Å–µ—â–∞–ª")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≥—Ä—É–ø–ø—ã
                if data['total_groups'] > 0:
                    print("\nüîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:")
                    print("   –°—Ç–∞—Ç—É—Å—ã –ø—Ä–∏—Ö–æ–¥–∞:", [s['display'] for s in data['filter_options']['arrival_statuses']])
                    print("   –£—Ä–æ–≤–Ω–∏ –¥–æ–≤–µ—Ä–∏—è:", [t['display'] for t in data['filter_options']['trust_levels']])
                
                return data
                
            elif response.status_code == 404:
                print(f"‚ùå {data.get('message', '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')}")
                if 'details' in data:
                    print(f"   üìù {data['details']}")
                return None
                
            elif response.status_code == 400:
                print(f"‚ùå {data.get('message', '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')}")
                if 'details' in data:
                    print(f"   üìù {data['details']}")
                return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                print(f"   {data.get('message', response.text)}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return None
    
    def test_missing_parameter(self):
        """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        print(f"\nüö´ –¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ participant_iin...")
        
        try:
            response = requests.get(
                f"{self.base_url}/api/groups/my_groups/",
                headers=self.headers
            )
            
            data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            if 'details' in data:
                print(f"   –î–µ—Ç–∞–ª–∏: {data['details']}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    def test_nonexistent_participant(self, fake_iin="999999999999"):
        """–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        print(f"\nüîç –¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {fake_iin}...")
        
        try:
            params = {'participant_iin': fake_iin}
            
            response = requests.get(
                f"{self.base_url}/api/groups/my_groups/",
                headers=self.headers,
                params=params
            )
            
            data = response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
            if 'details' in data:
                print(f"   –î–µ—Ç–∞–ª–∏: {data['details']}")
            print(f"   –ì—Ä—É–ø–ø –Ω–∞–π–¥–µ–Ω–æ: {data.get('total_groups', 0)}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    def test_pagination(self, participant_iin):
        """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        print(f"\nüìñ –¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant_iin}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å 2 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        data = self.test_my_groups(participant_iin, page=1, per_page=2)
        
        if data and data['pagination']['total_pages'] > 1:
            print("\nüìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            self.test_my_groups(participant_iin, page=2, per_page=2)


def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏)
    BASE_URL = "http://localhost:8000"
    API_TOKEN = "your_api_token_here"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    PARTICIPANT_IIN = "123456789012"   # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò–ù —É—á–∞—Å—Ç–Ω–∏–∫–∞
    
    if len(sys.argv) > 1:
        API_TOKEN = sys.argv[1]
    if len(sys.argv) > 2:
        PARTICIPANT_IIN = sys.argv[2]
    
    if API_TOKEN == "your_api_token_here":
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API —Ç–æ–∫–µ–Ω!")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_api.py YOUR_TOKEN [PARTICIPANT_IIN]")
        print("\n–ò–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ API_TOKEN –∏ PARTICIPANT_IIN –≤ —Å–∫—Ä–∏–ø—Ç–µ")
        sys.exit(1)
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≥—Ä—É–ø–ø –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏")
    print(f"   URL: {BASE_URL}")
    print(f"   –¢–æ–∫–µ–Ω: {API_TOKEN[:10]}...")
    print(f"   –ò–ò–ù —É—á–∞—Å—Ç–Ω–∏–∫–∞: {PARTICIPANT_IIN}")
    print("=" * 60)
    
    client = APIClient(BASE_URL, API_TOKEN)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    if client.test_health_check():
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        client.test_my_groups(PARTICIPANT_IIN)
        client.test_pagination(PARTICIPANT_IIN)
        
        # –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        print("\n" + "=" * 40)
        print("üß™ –¢–ï–°–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
        print("=" * 40)
        
        client.test_missing_parameter()
        client.test_nonexistent_participant()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    main() 