from django.contrib import admin
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _
from unfold.admin import ModelAdmin
from unfold.contrib.filters.admin import RangeDateFilter
from unfold.decorators import display
from .models import APIToken

@admin.register(APIToken)
class APITokenAdmin(ModelAdmin):
    list_display = [
        'name', 
        'prefix_display', 
        'permissions_display',
        'status_display', 
        'last_used_display',
        'expires_display',
        'created'
    ]
    
    list_filter = [
        'permissions', 
        'is_active',
        ('created', RangeDateFilter),
        ('last_used', RangeDateFilter),
        ('expires_at', RangeDateFilter),
    ]
    
    search_fields = ['name', 'description', 'prefix']
    
    readonly_fields = [
        'token_hash', 
        'prefix', 
        'created', 
        'modified', 
        'last_used'
    ]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Unfold
    compressed_fields = True
    warn_unsaved_form = True
    show_full_result_count = False
    list_per_page = 25
    
    # –î–µ–π—Å—Ç–≤–∏—è
    actions = ['deactivate_tokens', 'activate_tokens']
    
    def get_fieldsets(self, request, obj=None):
        if obj:  # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
            return (
                (_("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), {
                    'fields': ('name', 'description', 'permissions')
                }),
                (_("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞"), {
                    'fields': ('is_active', 'expires_at', 'ip_whitelist')
                }),
                (_("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), {
                    'fields': ('prefix', 'token_hash', 'last_used', 'created', 'modified'),
                    'classes': ('collapse',)
                }),
            )
        else:  # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            return (
                (_("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), {
                    'fields': ('name', 'description', 'permissions')
                }),
                (_("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞"), {
                    'fields': ('is_active', 'expires_at', 'ip_whitelist')
                }),
            )
    
    @display(description=_("–¢–æ–∫–µ–Ω"))
    def prefix_display(self, obj):
        return format_html(
            '<code style="background: #f8f9fa; padding: 2px 6px; border-radius: 3px;">{}</code>',
            f"{obj.prefix}***"
        )
    
    @display(description=_("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"))
    def permissions_display(self, obj):
        colors = {
            'read_only': '#28a745',    # –∑–µ–ª–µ–Ω—ã–π
            'read_write': '#ffc107',   # –∂–µ–ª—Ç—ã–π  
            'admin': '#dc3545'         # –∫—Ä–∞—Å–Ω—ã–π
        }
        color = colors.get(obj.permissions, '#6c757d')
        
        return format_html(
            '<span style="background: {}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">{}</span>',
            color,
            obj.get_permissions_display()
        )
    
    @display(description=_("–°—Ç–∞—Ç—É—Å"))
    def status_display(self, obj):
        if obj.is_active and obj.is_valid():
            return format_html(
                '<span style="color: #28a745;">‚óè</span> <span style="color: #28a745; font-weight: bold;">–ê–∫—Ç–∏–≤–µ–Ω</span>'
            )
        elif obj.is_active and not obj.is_valid():
            return format_html(
                '<span style="color: #ffc107;">‚óè</span> <span style="color: #ffc107; font-weight: bold;">–ò—Å—Ç–µ–∫</span>'
            )
        else:
            return format_html(
                '<span style="color: #dc3545;">‚óè</span> <span style="color: #dc3545; font-weight: bold;">–û—Ç–∫–ª—é—á–µ–Ω</span>'
            )
    
    @display(description=_("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"))
    def last_used_display(self, obj):
        if obj.last_used:
            return obj.last_used.strftime('%d.%m.%Y %H:%M')
        return format_html('<span style="color: #6c757d; font-style: italic;">–ù–∏–∫–æ–≥–¥–∞</span>')
    
    @display(description=_("–ò—Å—Ç–µ–∫–∞–µ—Ç"))
    def expires_display(self, obj):
        if obj.expires_at:
            return obj.expires_at.strftime('%d.%m.%Y %H:%M')
        return format_html('<span style="color: #6c757d; font-style: italic;">–ù–∏–∫–æ–≥–¥–∞</span>')
    
    def get_readonly_fields(self, request, obj=None):
        if obj:  # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            return self.readonly_fields
        else:  # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
            return ['token_hash', 'prefix', 'last_used']
    
    def save_model(self, request, obj, form, change):
        if not change:  # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è, –Ω–æ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            token = APIToken.generate_token()
            import hashlib
            obj.token_hash = hashlib.sha256(token.encode()).hexdigest()
            obj.prefix = token[:8]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ Django ORM
            super().save_model(request, obj, form, change)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.message_user(
                request,
                format_html(
                    '<div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 6px; padding: 16px; margin: 8px 0;">'
                    '<div style="display: flex; align-items: center; margin-bottom: 12px;">'
                    '<span style="color: #856404; font-size: 18px; margin-right: 8px;">üîë</span>'
                    '<strong style="color: #856404;">API –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</strong>'
                    '</div>'
                    '<div style="margin-bottom: 8px;">'
                    '<strong>–í–∞—à —Ç–æ–∫–µ–Ω:</strong><br>'
                    '<code style="background: #f8f9fa; padding: 8px 12px; border-radius: 4px; '
                    'font-family: monospace; font-size: 14px; word-break: break-all; display: block; margin: 4px 0;">{}</code>'
                    '</div>'
                    '<div style="color: #721c24; background: #f8d7da; border: 1px solid #f5c6cb; '
                    'border-radius: 4px; padding: 8px; font-size: 13px;">'
                    '<strong>‚ö†Ô∏è –í–ê–ñ–ù–û:</strong> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å–µ–π—á–∞—Å! –í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ —É–≤–∏–¥–µ—Ç—å.'
                    '</div>'
                    '</div>',
                    token
                ),
                level='WARNING'
            )
        else:
            # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
            super().save_model(request, obj, form, change)
    
    @admin.action(description=_("–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"))
    def deactivate_tokens(self, request, queryset):
        updated = queryset.filter(is_active=True).update(is_active=False)
        self.message_user(
            request,
            format_html(_("–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: <strong>{}</strong>"), updated),
            level='SUCCESS'
        )
    
    @admin.action(description=_("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"))
    def activate_tokens(self, request, queryset):
        updated = queryset.filter(is_active=False).update(is_active=True)
        self.message_user(
            request,
            format_html(_("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: <strong>{}</strong>"), updated),
            level='SUCCESS'
        )
