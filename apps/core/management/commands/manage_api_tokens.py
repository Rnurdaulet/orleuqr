from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from datetime import datetime, timedelta
from apps.core.models import APIToken


class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤'

    def add_arguments(self, parser):
        subparsers = parser.add_subparsers(dest='action', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        create_parser = subparsers.add_parser('create', help='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω')
        create_parser.add_argument('name', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞')
        create_parser.add_argument(
            '--permissions', 
            choices=['read_only', 'read_write', 'admin'],
            default='read_only',
            help='–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: read_only)'
        )
        create_parser.add_argument(
            '--expires-days', 
            type=int,
            help='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –±–µ–∑ —Å—Ä–æ–∫–∞)'
        )
        create_parser.add_argument(
            '--ip-whitelist',
            help='–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ IP –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
        )
        create_parser.add_argument(
            '--description',
            help='–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞'
        )
        
        # –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
        list_parser = subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã')
        list_parser.add_argument(
            '--active-only',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã'
        )
        
        # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        deactivate_parser = subparsers.add_parser('deactivate', help='–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω')
        deactivate_parser.add_argument('token_id', type=int, help='ID —Ç–æ–∫–µ–Ω–∞')
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        activate_parser = subparsers.add_parser('activate', help='–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω')
        activate_parser.add_argument('token_id', type=int, help='ID —Ç–æ–∫–µ–Ω–∞')
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        delete_parser = subparsers.add_parser('delete', help='–£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω')
        delete_parser.add_argument('token_id', type=int, help='ID —Ç–æ–∫–µ–Ω–∞')
        delete_parser.add_argument(
            '--confirm',
            action='store_true',
            help='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ'
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
        info_parser = subparsers.add_parser('info', help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ')
        info_parser.add_argument('token_id', type=int, help='ID —Ç–æ–∫–µ–Ω–∞')

    def handle(self, *args, **options):
        action = options.get('action')
        
        if action == 'create':
            self.create_token(options)
        elif action == 'list':
            self.list_tokens(options)
        elif action == 'deactivate':
            self.deactivate_token(options)
        elif action == 'activate':
            self.activate_token(options)
        elif action == 'delete':
            self.delete_token(options)
        elif action == 'info':
            self.show_token_info(options)
        else:
            self.print_help('manage_api_tokens', '')

    def create_token(self, options):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π API —Ç–æ–∫–µ–Ω"""
        name = options['name']
        permissions = options['permissions']
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        token_params = {
            'permissions': permissions,
        }
        
        if options.get('expires_days'):
            token_params['expires_at'] = timezone.now() + timedelta(days=options['expires_days'])
        
        if options.get('ip_whitelist'):
            token_params['ip_whitelist'] = options['ip_whitelist']
            
        if options.get('description'):
            token_params['description'] = options['description']
        
        try:
            api_token, token = APIToken.create_token(name, **token_params)
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
            )
            self.stdout.write(f'ID: {api_token.id}')
            self.stdout.write(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {api_token.name}')
            self.stdout.write(f'–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {api_token.get_permissions_display()}')
            
            if api_token.expires_at:
                self.stdout.write(f'–ò—Å—Ç–µ–∫–∞–µ—Ç: {api_token.expires_at.strftime("%d.%m.%Y %H:%M")}')
            else:
                self.stdout.write('–ò—Å—Ç–µ–∫–∞–µ—Ç: –ù–∏–∫–æ–≥–¥–∞')
                
            self.stdout.write('\n' + '='*60)
            self.stdout.write(self.style.WARNING('üîë –í–ê–® API –¢–û–ö–ï–ù:'))
            self.stdout.write(self.style.HTTP_NOT_MODIFIED(token))
            self.stdout.write('='*60)
            self.stdout.write(
                self.style.ERROR(
                    '‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å–µ–π—á–∞—Å!\n'
                    '–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –µ–≥–æ —É–≤–∏–¥–µ—Ç—å.'
                )
            )
            
        except Exception as e:
            raise CommandError(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}')

    def list_tokens(self, options):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        queryset = APIToken.objects.all()
        
        if options.get('active_only'):
            queryset = queryset.filter(is_active=True)
            
        tokens = queryset.order_by('-created')
        
        if not tokens.exists():
            self.stdout.write('–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            return
        
        self.stdout.write(f'üìã –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens.count()}\n')
        
        for token in tokens:
            status = '‚úÖ' if token.is_active else '‚ùå'
            valid = 'üü¢' if token.is_valid() else 'üî¥'
            
            self.stdout.write(f'{status} {valid} ID: {token.id} | {token.name}')
            self.stdout.write(f'   –ü—Ä–µ—Ñ–∏–∫—Å: {token.prefix}***')
            self.stdout.write(f'   –ü—Ä–∞–≤–∞: {token.get_permissions_display()}')
            self.stdout.write(f'   –°–æ–∑–¥–∞–Ω: {token.created.strftime("%d.%m.%Y %H:%M")}')
            
            if token.last_used:
                self.stdout.write(f'   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {token.last_used.strftime("%d.%m.%Y %H:%M")}')
            else:
                self.stdout.write('   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ù–∏–∫–æ–≥–¥–∞')
                
            if token.expires_at:
                self.stdout.write(f'   –ò—Å—Ç–µ–∫–∞–µ—Ç: {token.expires_at.strftime("%d.%m.%Y %H:%M")}')
            
            if token.ip_whitelist:
                self.stdout.write(f'   IP –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {token.ip_whitelist}')
                
            self.stdout.write('')

    def deactivate_token(self, options):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω"""
        token_id = options['token_id']
        
        try:
            token = APIToken.objects.get(id=token_id)
            if not token.is_active:
                self.stdout.write(self.style.WARNING(f'–¢–æ–∫–µ–Ω {token.name} —É–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.'))
                return
                
            token.is_active = False
            token.save()
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –¢–æ–∫–µ–Ω {token.name} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.')
            )
            
        except APIToken.DoesNotExist:
            raise CommandError(f'–¢–æ–∫–µ–Ω —Å ID {token_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    def activate_token(self, options):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω"""
        token_id = options['token_id']
        
        try:
            token = APIToken.objects.get(id=token_id)
            if token.is_active:
                self.stdout.write(self.style.WARNING(f'–¢–æ–∫–µ–Ω {token.name} —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.'))
                return
                
            token.is_active = True
            token.save()
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –¢–æ–∫–µ–Ω {token.name} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.')
            )
            
        except APIToken.DoesNotExist:
            raise CommandError(f'–¢–æ–∫–µ–Ω —Å ID {token_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    def delete_token(self, options):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω"""
        token_id = options['token_id']
        
        if not options.get('confirm'):
            raise CommandError(
                '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. '
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --confirm –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
            )
        
        try:
            token = APIToken.objects.get(id=token_id)
            token_name = token.name
            token.delete()
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –¢–æ–∫–µ–Ω {token_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')
            )
            
        except APIToken.DoesNotExist:
            raise CommandError(f'–¢–æ–∫–µ–Ω —Å ID {token_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    def show_token_info(self, options):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ"""
        token_id = options['token_id']
        
        try:
            token = APIToken.objects.get(id=token_id)
            
            self.stdout.write(f'üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ')
            self.stdout.write('='*40)
            self.stdout.write(f'ID: {token.id}')
            self.stdout.write(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {token.name}')
            self.stdout.write(f'–ü—Ä–µ—Ñ–∏–∫—Å: {token.prefix}***')
            self.stdout.write(f'–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {token.get_permissions_display()}')
            self.stdout.write(f'–°—Ç–∞—Ç—É—Å: {"–ê–∫—Ç–∏–≤–µ–Ω" if token.is_active else "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}')
            self.stdout.write(f'–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" if token.is_valid() else "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"}')
            
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω: {token.created.strftime("%d.%m.%Y %H:%M")}')
            self.stdout.write(f'–ò–∑–º–µ–Ω–µ–Ω: {token.modified.strftime("%d.%m.%Y %H:%M")}')
            
            if token.last_used:
                self.stdout.write(f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {token.last_used.strftime("%d.%m.%Y %H:%M")}')
            else:
                self.stdout.write('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –ù–∏–∫–æ–≥–¥–∞')
            
            if token.expires_at:
                self.stdout.write(f'–ò—Å—Ç–µ–∫–∞–µ—Ç: {token.expires_at.strftime("%d.%m.%Y %H:%M")}')
                if token.expires_at < timezone.now():
                    self.stdout.write(self.style.ERROR('‚ö†Ô∏è  –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫!'))
            else:
                self.stdout.write('–ò—Å—Ç–µ–∫–∞–µ—Ç: –ù–∏–∫–æ–≥–¥–∞')
            
            if token.ip_whitelist:
                self.stdout.write(f'IP –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {token.ip_whitelist}')
            else:
                self.stdout.write('IP –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –ù–µ—Ç')
            
            if token.description:
                self.stdout.write(f'–û–ø–∏—Å–∞–Ω–∏–µ: {token.description}')
                
        except APIToken.DoesNotExist:
            raise CommandError(f'–¢–æ–∫–µ–Ω —Å ID {token_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.') 