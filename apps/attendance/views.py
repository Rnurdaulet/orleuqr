from django.shortcuts import render, redirect
from django.contrib import messages
from django.utils.timezone import localtime
from django.views.decorators.http import require_http_methods
from django.urls import reverse

from apps.participants.models import PersonProfile
from apps.attendance.models import Attendance, TrustLog
from apps.groups.models import Session

from .forms import ManualMarkForm


@require_http_methods(["GET", "POST"])
def manual_mark_view(request):
    iin = request.GET.get("iin")
    trainer = PersonProfile.objects.filter(iin=iin, role=PersonProfile.Role.TRAINER).first()
    if not trainer:
        messages.error(request, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä.")
        return redirect("/")

    today = localtime().date()
    sessions = Session.objects.filter(group__trainers=trainer, date=today).select_related("group")

    if request.method == "POST":
        form = ManualMarkForm(request.POST, trainer=trainer)
        if form.is_valid():
            profile = form.cleaned_data["profile"]
            session = form.cleaned_data["session"]
            mark_type = form.cleaned_data["mark_type"]

            # üõ°Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
            if session.date != today:
                messages.error(request, "–ú–æ–∂–Ω–æ –æ—Ç–º–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–µ—Å—Å–∏–∏.")
                return redirect(f"{request.path}?iin={trainer.iin}")

            if not session.group.trainers.filter(id=trainer.id).exists():
                messages.error(request, "–í—ã –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–æ–π —Å–µ—Å—Å–∏–µ–π.")
                return redirect(f"{request.path}?iin={trainer.iin}")

            if not session.group.participants.filter(id=profile.id).exists():
                messages.error(request, "–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ.")
                return redirect(f"{request.path}?iin={trainer.iin}")

            attendance, created = Attendance.objects.get_or_create(
                session=session,
                profile=profile,
                defaults={
                    "trust_level": Attendance.TrustLevel.MANUAL,
                    "trust_score": 0,
                    "fingerprint_hash": f"manual-mark-{trainer.iin}",
                    "marked_by_trainer": trainer,
                }
            )

            changed = False

            if mark_type == "entry" and not attendance.arrived_at:
                attendance.arrived_at = localtime()
                changed = True
            elif mark_type == "exit":
                if not attendance.arrived_at:
                    messages.error(request, "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—Ö–æ–¥.")
                    return redirect(f"{request.path}?iin={trainer.iin}")
                if not attendance.left_at:
                    attendance.left_at = localtime()
                    changed = True

            if changed:
                attendance.save()

                TrustLog.objects.create(
                    fingerprint=None,
                    attendance=attendance,
                    reason=f"–†—É—á–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ ({mark_type}) —Ç—Ä–µ–Ω–µ—Ä–æ–º {trainer.full_name} ({trainer.iin})",
                    delta=-10,
                )

                messages.success(request, f"{profile.full_name} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –Ω–∞ {mark_type}.")
            else:
                messages.info(request, f"{profile.full_name} —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –Ω–∞ {mark_type} —Ä–∞–Ω–µ–µ.")

            return redirect(f"{request.path}?iin={trainer.iin}")
        else:
            messages.error(request, "–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        form = ManualMarkForm(trainer=trainer)

    return render(request, "attendance/manual_mark.html", {
        "trainer": trainer,
        "sessions": sessions,
        "form": form,
    })
