from django.db import models
from django.utils.translation import gettext_lazy as _
from apps.groups.models import Session
from apps.participants.models import PersonProfile
from apps.core.models import BaseModel


class Attendance(BaseModel):
    class TrustLevel(models.TextChoices):
        TRUSTED = "trusted", _("–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π")
        SUSPICIOUS = "suspicious", _("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π")
        BLOCKED = "blocked", _("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        MANUAL = "manual_by_trainer", _("–†—É—á–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞")

    class TimeStatus(models.TextChoices):
        MANUAL = "by_trainer", _("–†—É—á–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞")
        TOO_EARLY = "too_early", _("–†–∞–Ω–æ")
        ON_TIME = "on_time", _("–í–æ –≤—Ä–µ–º—è")
        TOO_LATE = "too_late", _("–û–ø–æ–∑–¥–∞–ª")
        UNKNOWN = "unknown", _("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    session = models.ForeignKey(
        Session,
        on_delete=models.CASCADE,
        related_name="attendances",
        verbose_name=_("–°–µ—Å—Å–∏—è"),
    )
    profile = models.ForeignKey(
        PersonProfile,
        on_delete=models.CASCADE,
        related_name="attendances",
        verbose_name=_("–ü—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
    )

    # ‚è±Ô∏è –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
    arrived_at = models.DateTimeField(_("–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞"), null=True, blank=True)
    left_at = models.DateTimeField(_("–í—Ä–µ–º—è —É—Ö–æ–¥–∞"), null=True, blank=True)
    arrived_status = models.CharField(
        _("–°—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞"),
        max_length=20,
        choices=TimeStatus.choices,
        default=TimeStatus.UNKNOWN,
    )
    left_status = models.CharField(
        _("–°—Ç–∞—Ç—É—Å –≤—ã—Ö–æ–¥–∞"),
        max_length=20,
        choices=TimeStatus.choices,
        default=TimeStatus.UNKNOWN,
    )
    # üß† –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –±—Ä–∞—É–∑–µ—Ä—É
    fingerprint_hash = models.CharField(
        _("–•—ç—à –±—Ä–∞—É–∑–µ—Ä–∞"), max_length=64, blank=True, null=True
    )
    trust_level = models.CharField(
        _("–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è"),
        max_length=20,
        choices=TrustLevel.choices,
        default=TrustLevel.TRUSTED,
    )
    trust_score = models.PositiveSmallIntegerField(
        _("–ë–∞–ª–ª—ã –¥–æ–≤–µ—Ä–∏—è"), default=100
    )

    # üßç –û—Ç–º–µ—Ç–∫–∞ –≤—Ä—É—á–Ω—É—é —Ç—Ä–µ–Ω–µ—Ä–æ–º
    marked_entry_by_trainer = models.ForeignKey(
        PersonProfile,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_("–í—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω –≤—Ä—É—á–Ω—É—é"),
        related_name="manual_entry_attendances",
    )

    marked_exit_by_trainer = models.ForeignKey(
        PersonProfile,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name=_("–í—ã—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω –≤—Ä—É—á–Ω—É—é"),
        related_name="manual_exit_attendances",
    )

    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = _("–û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è")
        verbose_name_plural = _("–û—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è")
        unique_together = ("session", "profile")
        indexes = [
            models.Index(fields=["session", "profile"]),
            models.Index(fields=["fingerprint_hash"]),
        ]
        ordering = ["-arrived_at"]

    def __str__(self):
        return f"{self.profile.full_name} ‚Üí {self.session.date} ({self.trust_level})"

    def is_present(self):
        return bool(self.arrived_at)

    def is_left(self):
        return bool(self.left_at)

    def is_suspicious(self):
        return self.trust_level in {
            self.TrustLevel.SUSPICIOUS,
            self.TrustLevel.BLOCKED,
        } or self.trust_score < 50

    def status_label(self):
        if self.left_at and self.arrived_at:
            return _("–ü–æ—Å–µ—Ç–∏–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        elif self.arrived_at:
            return _("–¢–æ–ª—å–∫–æ –≤—Ö–æ–¥")
        elif self.left_at:
            return _("–¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥")
        return _("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    @classmethod
    def for_group(cls, group):
        return cls.objects.filter(session__group=group).select_related("profile", "session")


class TrustLog(models.Model):
    fingerprint = models.ForeignKey("participants.BrowserFingerprint", on_delete=models.CASCADE, null=True, blank=True)
    attendance = models.ForeignKey("attendance.Attendance", on_delete=models.SET_NULL, null=True, blank=True)
    reason = models.CharField(max_length=255)
    delta = models.SmallIntegerField()
    created_at = models.DateTimeField(auto_now_add=True)

    def save(self, *args, **kwargs):
        if not self.fingerprint and not self.attendance:
            raise ValueError("TrustLog must be linked to either fingerprint or attendance.")
        super().save(*args, **kwargs)
