#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ç–æ–∫–µ–Ω–∞
"""

import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'orleuqr.settings')
django.setup()

from apps.core.models import APIToken

def check_token(token_value):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API —Ç–æ–∫–µ–Ω–∞"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω: {token_value[:10]}...")
    
    try:
        # –ò—â–µ–º —Ç–æ–∫–µ–Ω –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
        prefix = token_value[:8]
        tokens = APIToken.objects.filter(prefix=prefix)
        
        if not tokens.exists():
            print(f"‚ùå –¢–æ–∫–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º '{prefix}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        for token in tokens:
            print(f"\nüìã –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω: {token.name}")
            print(f"   ID: {token.id}")
            print(f"   –ü—Ä–µ—Ñ–∏–∫—Å: {token.prefix}")
            print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if token.is_active else '‚ùå'}")
            print(f"   –ü—Ä–∞–≤–∞: {token.permissions}")
            print(f"   –°–æ–∑–¥–∞–Ω: {token.created_at}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {token.last_used or '–ù–∏–∫–æ–≥–¥–∞'}")
            print(f"   IP –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {token.allowed_ips or '–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            if token.verify_token(token_value):
                print(f"   –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                
                if token.is_valid():
                    print(f"   –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                    print(f"\nüéâ –¢–æ–∫–µ–Ω '{token.name}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                    return True
                else:
                    print(f"   –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: ‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                    return False
            else:
                print(f"   –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: ‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def list_all_tokens():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ"""
    print("\nüìã –í—Å–µ API —Ç–æ–∫–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ:")
    print("=" * 60)
    
    tokens = APIToken.objects.all().order_by('-created_at')
    
    if not tokens.exists():
        print("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç API —Ç–æ–∫–µ–Ω–æ–≤")
        print("\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:")
        print("   http://localhost:8000/admin/core/apitoken/")
        return
    
    for i, token in enumerate(tokens, 1):
        status = "‚úÖ" if token.is_active and token.is_valid() else "‚ùå"
        print(f"{i}. {status} {token.name}")
        print(f"   –ü—Ä–µ—Ñ–∏–∫—Å: {token.prefix}")
        print(f"   –ü—Ä–∞–≤–∞: {token.permissions}")
        print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {token.is_active}")
        if token.expires_at:
            print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {token.expires_at}")
        print()

def create_test_token():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω"""
    print("\nüîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω...")
    
    try:
        token = APIToken.objects.create(
            name="Test Token (auto-created)",
            permissions="read_write"
        )
        
        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω!")
        print(f"   –ò–º—è: {token.name}")
        print(f"   –¢–æ–∫–µ–Ω: {token.key}")
        print(f"   –ü—Ä–∞–≤–∞: {token.permissions}")
        print("\nüìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ test_groups_api.py:")
        print(f"   API_TOKEN = '{token.key}'")
        
        return token.key
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def main():
    print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ç–æ–∫–µ–Ω–æ–≤")
    print("=" * 60)
    
    # –¢–æ–∫–µ–Ω –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    test_token = "Xou_3BhElBy8cCN53Gc3M7hjmPmhht_sZwwqZoCf1Qw"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
    if not check_token(test_token):
        print(f"\n‚ùå –¢–æ–∫–µ–Ω {test_token[:10]}... –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
        list_all_tokens()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        choice = input("\n‚ùì –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω? (y/n): ").lower().strip()
        if choice in ['y', 'yes', '–¥–∞', '']:
            new_token = create_test_token()
            if new_token:
                print(f"\n‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:")
            print("   http://localhost:8000/admin/core/apitoken/")
    
    print("\nüèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main() 